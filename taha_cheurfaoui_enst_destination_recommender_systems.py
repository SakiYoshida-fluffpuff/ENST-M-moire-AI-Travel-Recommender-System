# -*- coding: utf-8 -*-
"""Taha_CHEURFAOUI_ENST_Destination_Recommender_Systems.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1544UYcDkmISW8RmVEOKrBDWqDCqJVMT4

# Taha CHEURFAOUI ENST 'MÃ©moire" Recommender System

# Touristic Destination dataset
"""

users_feedback = {'TAHA': {'ALGER': 5.0, 
		                       'SETIF': 4.5,
		                       'MSILA': 2.0, 
		                       'CONSTANTINE': 4.0, 
		                       'TELEMCEN': 4.5, 
		                       'SKIKDA': 2.0},
	 
	                'MEHDI': {'ALGER': 3.0, 
		                        'SETIF': 4.0, 
		                        'CONSTANTINE': 4, 
		                        'MSILA': 2.0, 
		                        'TELEMCEN': 4.0, 
		                        'SKIKDA': 4.0}, 

	                'YASSER': {'ALGER': 3.5, 
		                         'SETIF': 3.0,
		                         'MSILA': 2.5, 
		                         'SKIKDA': 2.5},
			 
	                'ISLAM': {'SETIF': 3.5, 
		                          'CONSTANTINE': 3.0,
		                          'MSILA': 4.0, 
		                          'TELEMCEN': 2.5, 
		                          'SKIKDA': 4.5},
				 
	                'IHEB': {'ALGER': 3.0, 
		                       'SETIF': 4.0, 
		                       'CONSTANTINE': 2.0, 
		                       'MSILA': 3.0, 
		                       'TELEMCEN': 2.0,
		                       'SKIKDA': 3.0}, 

	                'ANES': {'ALGER': 3.0, 
	                           'SETIF': 4.0,
	                           'MSILA': 5.0, 
	                           'TELEMCEN': 3.5, 
	                           'SKIKDA': 3.0},
			  
	                'CHOUAIB': {'SETIF':4.5,
                           'MSILA':4.0,
	                         'TELEMCEN':1.0}
}

users_feedback

users_feedback['TAHA']

users_feedback['YASSER']

users_feedback['TAHA']['SETIF']

users_feedback['MEHDI']['MSILA']

"""# Euclidian distance"""

import math

math.pow(5, 2), math.pow(3, 2)

math.pow(3 - 3, 2)

math.pow(3.5 - 4, 2)

math.sqrt(math.pow(3 - 3, 2) + math.pow(3.5 - 4, 2))

math.sqrt(math.pow(3 - 1.5, 2) + math.pow(3.5 - 5, 2))

1 / (1 + math.sqrt(math.pow(3 - 3, 2) + math.pow(3.5 - 4, 2)))

1 / (1 + math.sqrt(math.pow(3 - 1.5, 2) + math.pow(3.5 - 5, 2)))

users_feedback['TAHA'], users_feedback['ISLAM']

def euclidian_distance(dataset, user1, user2):
  similarity = {}
  for item in dataset[user1]:
    #print(item)
    if item in dataset[user2]:
      #print(item)
      similarity[item] = 1
  
  #print(similarity)
  #print(len(similarity))

  if len(similarity) == 0:
    return 0

  #print([dataset[user1][item] for item in dataset[user1] if item in dataset[user2]])
  #print([dataset[user2][item] for item in dataset[user2] if item in dataset[user1]])

  sum_euclidian = sum([math.pow(dataset[user1][item] - dataset[user2][item], 2) for item in dataset[user1] if item in dataset[user2]])
  #print(sum_euclidian)

  return 1 / (1 + math.sqrt(sum_euclidian))

euclidian_distance(users_feedback, 'TAHA', 'ISLAM')

euclidian_distance(users_feedback, 'TAHA', 'IHEB')

euclidian_distance(users_feedback, 'TAHA', 'ANES')

"""# Similarity between users"""

def get_similarities(dataset, user):
  similarity = [(euclidian_distance(dataset, user, other), other) for other in dataset if other != user]
  #print(similarity)
  similarity.sort()
  similarity.reverse()
  return similarity

get_similarities(users_feedback, 'TAHA')

get_similarities(users_feedback, 'ANES')

"""# Touristic Destination recommendation"""

users_feedback['TAHA']

users_feedback['ANES']

def get_user_recommendation(dataset, user):
  totals = {}
  sum_similarity = {}
  for other in dataset:
    if other == user:
      continue    
    
    #print('--------')
    #print(other)
    similarity = euclidian_distance(dataset, user, other)
    #print(similarity)

    if similarity == 0:
      continue

    for item in dataset[other]:
      #print(item)
      if item not in dataset[user]:
        #print(item)
        totals.setdefault(item, 0)
        #print(totals)
        totals[item] += dataset[other][item] * similarity

        sum_similarity.setdefault(item, 0)
        sum_similarity[item] += similarity

  #print(totals)
  #print(sum_similarity)
  recommendations = [(total / sum_similarity[item], item) for item, total in totals.items()]  
  recommendations.sort()
  recommendations.reverse()
  return recommendations

4.711523927029628 / 1.6931342030228063

get_user_recommendation(users_feedback, 'CHOUAIB')

get_user_recommendation(users_feedback, 'TAHA')

get_user_recommendation(users_feedback, 'ISLAM')

get_user_recommendation(users_feedback, 'ANES')

get_user_recommendation(users_feedback, 'YASSER')

"""# Select user to be recommended"""

recommendation = get_user_recommendation(users_feedback, 'ANES')

recommendation

def print_user_recommendation(recommendations, min_score):
  for destination in recommendations:
    #print(destination, destination[0], destination[1])
    if destination[0] >= min_score:
      print(destination[1])

"""# Recommended Destination"""

print_user_recommendation(recommendation, 3)